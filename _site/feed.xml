<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-09-20T10:15:25+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">dsm Blogs</title><subtitle>This is a blog about Data Science and Machine Learning. I write about all the things I learn in this domain. I also share my knowledge with you.</subtitle><entry><title type="html">Policy Gradients</title><link href="http://localhost:4000/ai/2024/09/20/Policy_gradients.html" rel="alternate" type="text/html" title="Policy Gradients" /><published>2024-09-20T10:00:10+05:30</published><updated>2024-09-20T10:00:10+05:30</updated><id>http://localhost:4000/ai/2024/09/20/Policy_gradients</id><content type="html" xml:base="http://localhost:4000/ai/2024/09/20/Policy_gradients.html"><![CDATA[<p>In this blog, we will discuss about the policy and policy gradients in reinforcement learning.</p>

<h1 id="policy">Policy</h1>

<p>The algorithm a software agent uses to determine it’s actions is called it’s policy. The goal of the agent is to learn a policy that maximizes its reward over time.</p>

<p>There are several types of policies:</p>

<ol>
  <li>Deterministic policies: 
These directly map states to actions</li>
  <li>Stochastic policies: 
These map states to probability distributions over actions. An action is randomly chosen based on the probability distribution, and it’s not necessary for the agent to always choose the action with the highest probability. This type of policy involves some randomness</li>
</ol>

<p>This distinction between deterministic and stochastic policies is an important concept in reinforcement learning and policy-based methods.</p>

<h1 id="policy-gradients">Policy Gradients</h1>

<p>Policy gradients is a type of reinforcement learning algorithm where the agent learns to make decisions based on a policy, which is a mapping from states to actions. [In naive terms, improves its policy by playing, using gradient descent  &amp; discounted rewards]</p>

<p>This method is useful for problems where the environment is fully observable, and the agent can learn by trial and error. Policy gradients have been successfully applied to problems such as robotics and natural language processing.</p>

<p>The policy gradient algorithm is an iterative process that gradually updates the policy parameters to maximize the expected reward. The optimization is done using gradient descent methods, such as stochastic gradient descent.</p>

<h2 id="algorithm">Algorithm</h2>

<p>One popular class of PG algorithms called REINFORCE algorithms (1992). Common variant:</p>

<ol>
  <li>Let the neural network play the game several times and keep calculating the gradients that would make the chosen action more likely - but don’t apply yet.</li>
  <li>Once you have run several episodes, compute each action’s advantage (+ve for good, -ve for bad).</li>
  <li>Multiply each gradient vector by the corresponding action’s advantage.</li>
  <li>Finally compute the mean of all resulting gradient vectors, and use it to perform a Gradient Descent step.</li>
</ol>]]></content><author><name></name></author><category term="AI" /><summary type="html"><![CDATA[In this blog, we will discuss about the policy and policy gradients in reinforcement learning.]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2024/09/15/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2024-09-15T15:08:10+05:30</published><updated>2024-09-15T15:08:10+05:30</updated><id>http://localhost:4000/jekyll/update/2024/09/15/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/09/15/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">Just machine learning</title><link href="http://localhost:4000/ai/2023/10/29/Just_machine_learning.html" rel="alternate" type="text/html" title="Just machine learning" /><published>2023-10-29T15:08:10+05:30</published><updated>2023-10-29T15:08:10+05:30</updated><id>http://localhost:4000/ai/2023/10/29/Just_machine_learning</id><content type="html" xml:base="http://localhost:4000/ai/2023/10/29/Just_machine_learning.html"><![CDATA[<p>In this blog post, we’re going to talk about machine learning and its different types.</p>

<p>Artificial intelligence (AI) refers to machines that are programmed to learn and perform tasks that usually require human thinking, like recognizing images, understanding speech, making decisions, and translating languages.</p>

<p>Machine learning is a branch of AI that allows computers to learn and make predictions or decisions based on data. It uses algorithms and statistical models to analyze data, find patterns, and make predictions on new data.</p>

<h1 id="supervised-learning">Supervised Learning</h1>

<p>Supervised learning is a machine learning technique where a model is trained on labeled data. The model is presented with inputs and corresponding outputs, and it learns to make predictions based on those inputs.</p>

<p>This technique is used for tasks such as classification, regression, and prediction.</p>

<p>Some common types of supervised learning include:</p>

<ul>
  <li><strong>Classification:</strong> the model learns to classify inputs into different categories or classes.</li>
  <li><strong>Regression:</strong> the model learns to predict a continuous output based on the input.</li>
  <li><strong>Time Series Prediction:</strong> the model learns to make predictions based on time series data.</li>
  <li><strong>Anomaly Detection:</strong> the model learns to identify unusual or unexpected data points.</li>
</ul>

<h2 id="classification">Classification</h2>

<p>Classification is a type of supervised learning in machine learning where the model learns to put inputs into different categories or classes.</p>

<p>Examples → Image recognition, sentiment analysis, and speech recognition.</p>

<p>There are a bunch of algorithms that can be used for classification, including decision trees, random forests, and support vector machines (SVMs).</p>

<p>The choice of algorithm depends on the specific problem and the characteristics of the data. For example, decision trees are great for problems with just a few features, while SVMs are awesome when there are lots of features and the data isn’t linearly separable.</p>

<p>There are many algorithms that can be used for classification, including:</p>

<ul>
  <li>Decision trees</li>
  <li>Random forests (Ensemble method)</li>
  <li>Support vector machines (SVMs)</li>
  <li>Nearest neighbor</li>
  <li>K-nearest neighbors (KNN)</li>
  <li>Naive Bayes</li>
</ul>

<p>Let’s Discuss some of these techniques:</p>

<h3 id="decision-trees">Decision Trees</h3>

<p>Decision trees are a type of classification algorithm used in machine learning. They are especially handy for problems with just a few features and a ton of training examples.</p>

<p>The basic idea behind decision trees is to split up the input space into different regions, where each region represents a different class or category. This is done by recursively splitting up the input space over and over again based on the values of the input features.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>![Fig: Decision Tree](https://static.javatpoint.com/tutorial/machine-learning/images/decision-tree-classification-algorithm.png)

Fig: Decision Tree

At each level of the tree, the algorithm picks the input feature that separates the training examples into different classes the best. This feature is used to make a decision node, which splits the input space into two or more regions. The process is repeated on each of the resulting regions until a stopping criterion is met, like reaching the maximum depth or having a minimum number of examples in each region.

Decision trees are super easy to understand and interpret, and they can be used for both classifying and regression problems. They can also handle non-linear relationships between the input features and the target variable.

```python
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import cross_val_score

model = DecisionTreeClassifier(random_state=0)
model.fit(X_train, Y_train)

score = cross_val_score(model, X, Y, cv=10)
```

Decision trees can also be used for regression problems, where the goal is to predict a continuous output variable based on the input features. The decision tree algorithm works in the same way as for classification problems, but instead of predicting a class label, it predicts a numeric value.

Here is an example of a decision tree for a regression problem:

- **Regression Decision Tree**
    
    ![Fig: Regression Decision Tree](https://scikit-learn.org/stable/_images/sphx_glr_plot_tree_regression_001.png)
    
    Fig: Regression Decision Tree
    
    In this example, the decision tree is used to fit a sine curve as a result it learns linear regression approximating the sine curve. We can see in this example, that if max depth of the tree is set to high, it can overfit the training data by learning the noise observations also.
    
    The algorithm chooses the feature that results in the best split of the data based on a measure of the variance reduction. The prediction for each leaf node is the average of the target values of the training examples that fall within that leaf node.
    

However, decision trees can be sensitive to small changes in the input data and may overfit the training data if not properly regularized. To address these issues, ensemble methods such as random forests and gradient boosting are often used.

Overall, decision trees are a simple and effective technique for classification and regression problems, particularly when the decision boundary is simple or linear.
</code></pre></div></div>

<ul>
  <li>
    <p><strong>Nearest-neighbor classification</strong></p>

    <p>In this algorithm, the model given an input chooses the class of the nearest data point to that point.</p>

    <p>This technique is useful for problems where the decision boundary between classes is complex or nonlinear. However, it can be computationally expensive and may not perform well on high-dimensional data.</p>
  </li>
  <li>
    <p><strong>K-Nearest Neighbor Classification (KNN)</strong></p>

    <p>In this algorithm, the model assigns a class to a new data point based on the classes of the k nearest data points in the training data set. The value of k is a hyperparameter that can be tuned to optimize the model’s performance.</p>

    <p>This technique is often used for problems with a small number of classes and a large number of features. However, it can be sensitive to the choice of distance metric used to calculate the distance between data points.</p>

    <p><a href="https://miro.medium.com/v2/resize:fit:1100/0*ItVKiyx2F3ZU8zV5">Fig: KNN Example</a></p>

    <p>Fig: KNN Example</p>

    <p>Overall, k-nearest neighbor classification is a simple and effective technique for classification problems, particularly when the decision boundary is complex or nonlinear.</p>
  </li>
</ul>

<h3 id="regression">Regression</h3>

<p>Regression is a type of supervised learning in machine learning. It involves the use of algorithms and statistical models to predict a continuous output based on input data.</p>

<p>This is useful when trying to predict a value that falls within a range, such as the price of a house based on its size, location, and other factors.</p>

<p>Example → f(size, location, architecture) = price
                   f(1200, Delhi, 2 story building) = 1 million</p>

<h3 id="types-of-regression">Types of Regression</h3>

<p>There are several types of regression, including:</p>

<ul>
  <li>
    <p><strong>Linear Regression:</strong> the model learns to predict a continuous output based on a linear relationship between the input and output variables.</p>

    <p>!https://static.javatpoint.com/tutorial/machine-learning/images/linear-regression-in-machine-learning.png</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># using skitit learn
</span>  <span class="kn">from</span> <span class="n">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">Linear</span> <span class="n">Regression</span>
    
  <span class="n">model</span> <span class="o">=</span> <span class="nc">LinearRegression</span><span class="p">()</span>
  <span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>
    
  <span class="c1"># Print coefficients and accuracy
</span>  <span class="nf">print</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="n">coef_</span><span class="p">)</span>
    
  <span class="n">accuracy</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">score</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">Y_test</span><span class="p">)</span>
  <span class="nf">print</span><span class="p">(</span><span class="n">accuracy</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Logistic Regression:</strong> the model learns to predict a binary output based on the input variables.</li>
  <li><strong>Polynomial Regression:</strong> the model learns to predict a continuous output based on a polynomial relationship between the input and output variables.</li>
  <li><strong>Ridge Regression:</strong> a regularization technique used to prevent overfitting in linear regression models.</li>
  <li><strong>Lasso Regression:</strong> a regularization technique used to prevent overfitting in linear regression models, but with a different approach than Ridge Regression.</li>
  <li><strong>Elastic Net Regression:</strong> a combination of Ridge and Lasso Regression, which balances their strengths and weaknesses.</li>
</ul>

<p>Each type of regression is suited for different types of data and problems, and choosing the right type of regression is an important part of building an accurate machine learning model.</p>

<p><strong>Logistic Regression</strong></p>

<p>Logistic regression is a type of supervised learning in machine learning that is used for binary classification tasks. In this technique, the model learns to predict a binary output (0 or 1) based on the input variables.</p>

<p>It is commonly used in applications such as fraud detection, spam filtering, and medical diagnosis.</p>

<p>The logistic regression algorithm uses a sigmoid function to map the input values to a range between 0 and 1 (generate probabilities), which represents the probability of the input data belonging to one of the two categories. The algorithm then makes a binary decision based on this probability.</p>

<p>!https://static.javatpoint.com/tutorial/machine-learning/images/logistic-regression-in-machine-learning.png</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Logistic Regression
</span><span class="kn">from</span> <span class="n">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LogisticRegression</span>
<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">accuracy_score</span>

<span class="n">model</span> <span class="o">=</span> <span class="nc">LogisticRegression</span><span class="p">()</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>

<span class="n">accuracy</span> <span class="o">=</span> <span class="nf">accuracy_score</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">),</span> <span class="n">Y_test</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">accuracy</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>Ridge Regression</strong></p>

<p>Ridge regression is a type of linear regression that adds a regularization term (L2) to the cost function to prevent overfitting. The cost function for ridge regression is:</p>

<p>The Ridge Regression Equation is given by:</p>

<p>$J(w) = \sum_{i=1}^{m} [y^{(i)} - \hat{y}^{(i)}]^2 + \alpha\sum_{j=1}^{n} w_j^2$</p>

<p>where:</p>

<ul>
  <li>J(w) is the cost function</li>
  <li>m is the number of training examples</li>
  <li>n is the number of features</li>
  <li>y is the target variable</li>
  <li>w is the vector of coefficients</li>
  <li>α is the regularization parameter</li>
</ul>

<p>The first term in the equation is the mean squared error (MSE) between the predicted values and the true values. The second term is the L2 regularization term, which penalizes the magnitude of the coefficients.</p>

<p><strong>Lasso Regression</strong></p>

<p>Lasso regression is another type of linear regression that adds a regularization term (L1) to the cost function. The cost function for lasso regression is:</p>

<table>
  <tbody>
    <tr>
      <td>$J(w) = \sum_{i=1}^{m} [y^{(i)} - \hat{y}^{(i)}]^2 + \alpha\sum_{j=1}^{n}</td>
      <td>w_j</td>
      <td>$</td>
    </tr>
  </tbody>
</table>

<p>Where:</p>

<ul>
  <li>$J(w)$ is the cost function</li>
  <li>$m$ is the number of training examples</li>
  <li>$n$ is the number of features</li>
  <li>$y$ is the target variable</li>
  <li>$w$ is the vector of coefficients</li>
  <li>$\alpha$ is the regularization parameter (hyperparameter)</li>
</ul>

<p>The first term in the equation is the mean squared error (MSE) between the predicted values and the true values. The second term is the L1 regularization term, which penalizes the absolute value of the coefficients.</p>

<p>Lasso regression is useful for feature selection, as it tends to set the coefficients of less important features to zero. This can lead to a more interpretable model and improve its generalization performance.</p>

<h2 id="unsupervised-learning">Unsupervised Learning</h2>

<hr />

<p>Unsupervised learning is a type of machine learning where the model is trained on unlabeled data. The model is not given any specific outputs to learn from, but instead must identify patterns and relationships in the input data on its own.</p>

<p>This technique is used for tasks such as clustering, anomaly detection, and dimensionality reduction.</p>

<p>Some common types of unsupervised learning include:</p>

<ul>
  <li>
    <p><strong>Clustering:</strong> the model learns to group similar inputs into clusters or categories.</p>

    <p><a href="https://www.notion.so/But-how-you-do-clustering-d6b2d75d69204bf0a78f8df5548f7fc8?pvs=21">But how you do clustering?</a></p>
  </li>
  <li><strong>Anomaly Detection:</strong> the model learns to identify unusual or unexpected data points.</li>
  <li><strong>Dimensionality Reduction:</strong> the model learns to identify the most important features or variables in the input data.</li>
  <li><strong>Density estimation</strong> involves a model learning a probability density function (PDF), which is used in anomaly detection. Instances found in very-low density regions are considered anomalies.</li>
</ul>

<p><a href="https://www.notion.so/Gaussian-Mixtures-b0c8ae93678d4590a12aeb3e42f68240?pvs=21">Gaussian Mixtures</a></p>

<p>Unsupervised learning is useful when working with large amounts of data that may not be well understood or labeled. By identifying patterns and relationships in the data, unsupervised learning can help to uncover insights and guide further analysis.</p>

<h2 id="reinforcement-learning">Reinforcement learning</h2>

<hr />

<p><a href="https://www.notion.so/Learn-by-Reinforcement-e811c0c2b34c47abb946dc90b59749fe?pvs=21">Learn by Reinforcement</a></p>

<p><strong>Convergence Rate</strong></p>

<p>The convergence rate of a model refers to how quickly the model is able to converge to an optimal solution during training.</p>

<p>A faster convergence rate means that the model is able to reach a good solution more quickly, while a slower convergence rate means that the model may require more time and resources to reach a good solution.</p>

<p>The convergence rate can be affected by various factors, such as the choice of optimization algorithm, the learning rate, the size of the training data, and the complexity of the model architecture. A well-designed model with appropriate hyperparameters can achieve a faster convergence rate and better performance.</p>

<h2 id="ensemble-methods">Ensemble Methods</h2>

<hr />

<p>A group of predictors is called ensemble and an ensemble learning algorithm is called Ensemble method.</p>

<p>In other words, Ensemble methods are a type of machine learning technique that involve combining multiple models to improve their performance.</p>

<p>Ensemble has a similar bias but a lower variance than a single predictor trained on a the original training set.</p>

<p>There are several types of ensemble methods, including:</p>

<ul>
  <li>
    <p><strong>Bagging:</strong> the model combines the predictions of multiple models trained on different subsets of the training data. This can help to reduce overfitting and improve the accuracy of the model.</p>

    <p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/5989232b-4798-4c63-ac9f-04cb2f5fb1a8/48745c7a-5e51-4186-8452-6647e672a3f6/Untitled.png" alt="Fig: Bagging and pasting involves training several predictors on different random samples of the training set" /></p>

    <p>Fig: Bagging and pasting involves training several predictors on different random samples of the training set</p>

    <p>Bagging - sampling is performed with replacement (bootstrap=True)</p>

    <p>Pasting - sampling is performed without replacement (bootstrap=False)</p>

    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kn">from</span> <span class="n">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">BaggingClassifier</span>
  <span class="kn">from</span> <span class="n">sklearn.tree</span> <span class="kn">import</span> <span class="n">DecisionTreeClassifier</span>
    
  <span class="n">bag_clf</span> <span class="o">=</span> <span class="nc">BaggingClassifier</span><span class="p">(</span>
      <span class="nc">DecisionTreeClassifier</span><span class="p">(),</span> <span class="n">n_estimators</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span>
      <span class="n">max_samples</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">bootstrap</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">n_jobs</span><span class="o">=-</span><span class="mi">1</span>
  <span class="p">)</span>
  <span class="n">bag_clf</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
    
  <span class="n">y_pred</span> <span class="o">=</span> <span class="n">bag_clf</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_val</span><span class="p">)</span>
  <span class="nf">print</span><span class="p">(</span><span class="n">y_pred</span><span class="p">)</span>
</code></pre></div>    </div>

    <p>n_estimators = number of decision trees</p>

    <p>max_samples = 100 training samples randomly sampled from training set</p>

    <p>bootstrap = True, with replacement</p>

    <p>n_jobs = number of CPU cores to use for training and predictions, -1 means use all available</p>

    <p>Bootstrapping introduces more diversity into the predictor, means it is more biased than pasting; but the diversity also means the predictors are less correlated and ensemble variance is reduced.</p>
  </li>
  <li>
    <p><strong>Boosting:</strong> the model combines the predictions of multiple weak models to create a strong model. This can help to improve the accuracy of the model and reduce bias.</p>
  </li>
  <li>
    <p><strong>Stacking:</strong> the model combines the predictions of multiple models using a meta-model (blender). This can help to improve the accuracy of the model and reduce overfitting.</p>

    <p><img src="https://prod-files-secure.s3.us-west-2.amazonaws.com/5989232b-4798-4c63-ac9f-04cb2f5fb1a8/8984dd70-5bb4-482c-8329-825d5ce887ba/Untitled.png" alt="Fig: Aggregating predictions using a blending predictor" /></p>

    <p>Fig: Aggregating predictions using a blending predictor</p>
  </li>
</ul>

<p>Ensemble methods are particularly useful when working with complex data or when the performance of a single model is not sufficient. By combining the predictions of multiple models, ensemble methods can help to improve the accuracy and reliability of the model.</p>

<p>Some common ensemble methods include:</p>

<h3 id="random-forests"><strong>Random Forests</strong></h3>

<hr />

<p>Random Forest is an ensemble of Decision trees, generally trained via the bagging method (or sometimes pasting), typically with <em>max_samples</em> set to the size of training set.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">RandomForestClassifier</span>

<span class="n">rnd_clf</span> <span class="o">=</span> <span class="nc">RandomForestClassifier</span><span class="p">(</span><span class="n">n_estimators</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span> <span class="n">max_leaf_nodes</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span> <span class="n">n_jobs</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">rnd_clf</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>

<span class="n">y_pred_rf</span> <span class="o">=</span> <span class="n">rnd_clf</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_val</span><span class="p">)</span>
</code></pre></div></div>

<p>Random Forest algorithm introduces extra randomness when growing trees; instead of searching for the best feature when splitting a node, it searches for the best feature among a random subset of features.</p>

<p><strong>Feature Importance</strong></p>

<p>Random forests allow us to measure the relative importance of each feature. Feature importance is calculated by how much tree nodes that use that use that feature reduce impurity on average.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># feature importance
</span><span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">score</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">iris</span><span class="p">[</span><span class="sh">"</span><span class="s">feature_names</span><span class="sh">"</span><span class="p">],</span> <span class="n">rnd_clf</span><span class="p">.</span><span class="n">feature_importances_</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">score</span><span class="p">)</span>

<span class="c1"># output
# sepal length (cm) 0.10109300798027078
# sepal width (cm) 0.031280365249363895
# petal length (cm) 0.3941268382545283
# petal width (cm) 0.47349978851583696
</span></code></pre></div></div>

<p>Random forests are particularly useful for high-dimensional data and problems with complex decision boundaries. They can also handle missing values and noisy data.</p>

<p>Overall, random forests are a powerful and versatile technique for solving a wide range of machine learning problems.</p>

<h3 id="adaboost"><strong>AdaBoost</strong></h3>

<hr />

<p>A type of boosting ensemble method used for classification problems. AdaBoost combines the predictions of multiple weak models using a weighted sum, where the relative weight of misclassified instances increased (boost).</p>

<p>The algorithm increases the relative weight of the misclassified training instances.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">AdaBoostClassifier</span>

<span class="n">ada_clf</span> <span class="o">=</span> <span class="nc">AdaBoostClassifier</span><span class="p">(</span>
    <span class="nc">DecisionTreeClassifier</span><span class="p">(</span><span class="n">max_depth</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">n_estimators</span><span class="o">=</span><span class="mi">200</span><span class="p">,</span> 
    <span class="n">algorithm</span><span class="o">=</span><span class="sh">"</span><span class="s">SAMME.R</span><span class="sh">"</span><span class="p">,</span> <span class="n">learning_rate</span><span class="o">=</span><span class="mf">0.5</span>
<span class="p">)</span>
<span class="n">ada_clf</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="gradient-boosting"><strong>Gradient Boosting</strong></h3>

<hr />

<p>A type of boosting ensemble method used for classification and regression problems. Gradient boosting tries to fit the new predictor to the residual errors (literally) made by the previous predictor.</p>

<p>The basic idea behind gradient boosting is to build a sequence of models, each of which tries to correct the errors of the previous models. The final prediction is the weighted sum of the predictions of all the models in the sequence.</p>

<p>For example, in a binary classification problem, the first model might predict the probability of the positive class for each example. The second model would then focus on the examples that were misclassified by the first model, and try to improve the predictions for those examples. The third model would then focus on the examples that were still misclassified by the first two models, and so on.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">GradientBoostingClassifier</span>

<span class="n">model</span> <span class="o">=</span> <span class="nc">GradientBoostingClassifier</span><span class="p">(</span><span class="n">n_estimators</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">learning_rate</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>

<span class="n">score</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">score</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">Y_test</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">score</span><span class="p">)</span>
</code></pre></div></div>

<p>Gradient boosting with early stopping:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">xgboost</span>

<span class="n">xgb_reg</span> <span class="o">=</span> <span class="n">xgboost</span><span class="p">.</span><span class="nc">XGBRegressor</span><span class="p">()</span>
<span class="n">xgb_reg</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>

<span class="n">xgb_reg</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span>
           <span class="n">eval_set</span><span class="o">=</span><span class="p">[(</span><span class="n">X_val</span><span class="p">,</span> <span class="n">y_val</span><span class="p">)],</span> <span class="n">early_stopping_rounds</span><span class="o">=</span><span class="mi">2</span>
           <span class="p">)</span>

<span class="n">y_pred</span> <span class="o">=</span> <span class="n">xgb_reg</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_val</span><span class="p">)</span>
</code></pre></div></div>

<p>Gradient boosting is a powerful technique for improving the performance of machine learning models, particularly when working with complex data or when the performance of a single model is not sufficient. However, it can be computationally intensive and may require careful tuning of hyperparameters to achieve good performance.</p>

<p>Overall, ensemble methods are a powerful technique for improving the performance of machine learning models, and they are widely used in industry and research. However, it is important to carefully consider the problem and the available data before choosing an ensemble method.</p>

<p><a href="https://www.kaggle.com/code/dsmeena/ch-7-ensemble-learning-and-random-forests"></a></p>]]></content><author><name></name></author><category term="AI" /><summary type="html"><![CDATA[In this blog post, we’re going to talk about machine learning and its different types.]]></summary></entry><entry><title type="html">Understanding git</title><link href="http://localhost:4000/web/2023/04/09/Understanding-Git.html" rel="alternate" type="text/html" title="Understanding git" /><published>2023-04-09T15:08:10+05:30</published><updated>2023-04-09T15:08:10+05:30</updated><id>http://localhost:4000/web/2023/04/09/Understanding-Git</id><content type="html" xml:base="http://localhost:4000/web/2023/04/09/Understanding-Git.html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p>Git is a distributed version control system that enables developers to track changes in their code and collaborate on projects with others. Created by Linus Torvalds in 2005, Git has since become one of the most popular version control systems in use today.</p>

<p>GitHub is a web-based platform that uses Git for version control and collaboration. It provides hosting for software development and a range of features for managing projects, such as bug tracking, task management, and wikis.</p>

<p>GitHub was created by Tom Preston-Werner, Chris Wanstrath, and PJ Hyett in 2008. You can remember the basic difference by Dates.</p>

<h2 id="features-of-git">Features of Git</h2>

<p>Git has several features, including:</p>

<ul>
  <li><strong>Version control:</strong> Git allows developers to track changes in their code and easily revert to previous versions if necessary.</li>
  <li><strong>Collaboration:</strong> Git enables developers to work on projects with others by sharing their code and collaborating on changes.</li>
  <li><strong>Branching:</strong> Git allows developers to create separate lines of development, called branches, which can be used to work on new features or bug fixes without affecting the main codebase.</li>
  <li><strong>Command line interface:</strong> Git can be used through a series of commands, which can be accessed through the command line interface.</li>
</ul>

<h2 id="how-does-git-works">How does Git Works?</h2>

<p>Git works by creating a repository, which is a directory where all of the project’s files and history are stored. Whenever a change is made to a file in the repository, Git records that change and stores it as a new version of the file. Developers can then easily view and revert to previous versions of the code if necessary.</p>

<p>Git uses a series of commands that developers can use to interact with the repository.</p>

<p>Now, let’s read about different commands used in different tasks: -</p>

<h3 id="starting-new-project-in-git">Starting new Project in Git</h3>

<p>To start a new project in Git, you need to create a new repository. This can be done using the <code class="language-plaintext highlighter-rouge">git init</code> command. First, navigate to the directory where you want to create the repository using the <code class="language-plaintext highlighter-rouge">cd</code> command. Then, use the <code class="language-plaintext highlighter-rouge">git init</code> command to create a new repository in that directory.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /path/to/your/directory
git init
</code></pre></div></div>

<p>Once the repository has been created, you can start adding files to it using the <code class="language-plaintext highlighter-rouge">git add</code> command, and then commit those changes using the <code class="language-plaintext highlighter-rouge">git commit</code> command.</p>

<p>You can also clone an existing project into your directory, using HTTPS, SSH or GitHub CLI.</p>

<p><img src="/assets/2024/September/clone_repo.png" alt="Fig: Ways to Clone an existing Project" /></p>

<p>Fig: Ways to Clone an existing Project</p>

<ul>
  <li>HTTPS → <code class="language-plaintext highlighter-rouge">git clone [HTTPS_link]</code></li>
  <li>
    <p>How to generate SSH (Secure Shell Protocol) Key</p>

    <p>To access a repository using SSH, you need to generate a public SSH key and add it to your GitHub account.</p>

    <ol>
      <li>Generate a new SSH key by running the following command in your terminal: <code class="language-plaintext highlighter-rouge">ssh-keygen -t rsa -b 4096 -C "your_email@example.com"</code></li>
      <li>
        <p>Follow the prompts to create a passphrase and save the key.</p>

        <p><img src="/assets/2024/September/Generate%20SSH%20Key.png" alt="Fig: Generating SSH Key" /></p>

        <p>Fig: Generating SSH Key</p>

        <p>Note → [Do not enter file name, we need files inside .ssh folder of User.]</p>
      </li>
      <li>Add the SSH key to your GitHub account by going to your account settings and selecting “SSH and GPG keys”. Click “New SSH key” and paste the contents of your public key into the text box.</li>
      <li>
        <p>Test your SSH connection by running the command <code class="language-plaintext highlighter-rouge">ssh -T git@github.com</code>. You should receive a message indicating that you’ve successfully authenticated.</p>

        <p><img src="/assets/2024/September/Generate%20SSH%20Key.png" alt="Fig: Authenticating SSH Key" /></p>

        <p>Fig: Authenticating SSH Key</p>

        <p>Note → [It shows shell access not provided because it is not necessary for most users. You can still use CMD.]</p>
      </li>
    </ol>

    <p>You can learn more about setting up SSH keys in GitHub by reading the <a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">official documentation</a> and <a href="https://www.youtube.com/watch?v=k805rTsX_iI">Youtube</a>.</p>
  </li>
  <li>SSH → <code class="language-plaintext highlighter-rouge">git clone ssh:[SSH_link]</code></li>
  <li>GitHub CLI → <code class="language-plaintext highlighter-rouge">gh repo clone [user_name]/[repo_name]</code></li>
</ul>

<h3 id="taking-snapshots-in-git">Taking Snapshots in Git</h3>

<p>A <strong>snapshot</strong> in Git refers to a saved version of the code at a specific point in time. Every time a change is made to a file in the repository, Git records a new snapshot of that file. Developers can then use Git to view and revert to previous snapshots if necessary. Snapshots are stored in the repository as commits, which are identified by a unique SHA-1 hash.</p>

<p>Snapshotting is a two-step process. The two-step process in Git consists of staging and committing changes.</p>

<ol>
  <li><strong>Staging changes</strong></li>
</ol>

<p>The staging area, also known as the index, is a feature in Git that allows developers to prepare changes for committing. Before changes can be committed to the repository, they must first be added to the staging area using the <code class="language-plaintext highlighter-rouge">git add</code> command.</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>git add [file-name]</td>
      <td>Add a file to the staging area</td>
    </tr>
    <tr>
      <td>git add -A</td>
      <td>Add all changed files to the staging area</td>
    </tr>
    <tr>
      <td>git rm -r [file_name]</td>
      <td>Remove a file from staging area</td>
    </tr>
    <tr>
      <td>git add -p</td>
      <td>Opens the patch mode</td>
    </tr>
  </tbody>
</table>

<ol>
  <li><strong>Committing changes</strong></li>
</ol>

<p>Once changes have been added to the staging area, they can be committed to the repository using the <code class="language-plaintext highlighter-rouge">git commit</code> command. This allows developers to selectively choose which changes to commit, rather than committing all changes at once.</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>git status</td>
      <td>Shows the status of changes as untracked, modified, or staged.</td>
    </tr>
    <tr>
      <td>git commit m “[commit message]”</td>
      <td>Saves the snapshot to the project-history and completes change-tracking process.</td>
    </tr>
  </tbody>
</table>

<h3 id="branching-and-merging">Branching and Merging</h3>

<p>Branching in Git allows developers to create separate lines of development, called branches, which can be used to work on new features or bug fixes without affecting the main codebase. This allows developers to experiment with new ideas and features without impacting the stability of the main codebase.</p>

<p>Here, you need to understand the difference between local branch and remote branch. A <strong>local branch</strong> is a branch that exists only on your local machine, while a <strong>remote branch</strong> is a branch that exists on a remote repository, such as on GitHub. Local branches can be used to work on new features or bug fixes without affecting the main codebase, and can later be merged into the main branch using Git. Remote branches can be used to collaborate with others on a project, and changes made to the remote branch can be pulled into your local branch using Git.</p>

<p>You can use following commands to deal with branches:</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>git branch</td>
      <td>Lists all the branches for the current repository</td>
    </tr>
    <tr>
      <td>git branch -a</td>
      <td>Lists all branches, including local and remote</td>
    </tr>
    <tr>
      <td>git branch [branch_name]</td>
      <td>Creates a new branch</td>
    </tr>
    <tr>
      <td>git branch -d [branch_name]</td>
      <td>Deletes a branch</td>
    </tr>
    <tr>
      <td>git branch -D</td>
      <td>Deletes local branch regardless of push and merge status</td>
    </tr>
    <tr>
      <td>git push origin –delete [branch_name]</td>
      <td>Deletes a remote branch</td>
    </tr>
    <tr>
      <td>git checkout -b [branch_name]</td>
      <td>Creates a new branch and switches to it</td>
    </tr>
    <tr>
      <td>git checkout -b [branch_name] origin/[branch_name]</td>
      <td>Clones a remote branch and switches to it</td>
    </tr>
    <tr>
      <td>git branch -m [old_branch_name] [new_branch_name]</td>
      <td>Renames a local branch</td>
    </tr>
    <tr>
      <td>git checkout [branch_name]</td>
      <td>Switches to an existing branch</td>
    </tr>
    <tr>
      <td>git checkout -</td>
      <td>Switches to the last checked out branch</td>
    </tr>
    <tr>
      <td>git checkout .</td>
      <td>discards all changes made to the current directory and returns it to the last committed state.</td>
    </tr>
    <tr>
      <td>git branch –merged</td>
      <td>list the branches that have been merged into the currently checked-out branch</td>
    </tr>
  </tbody>
</table>

<p>Once you’ve made changes to the new branch, you can merge those changes back into the main branch using the <code class="language-plaintext highlighter-rouge">git merge [branch-name]</code> command. This combines the changes from the specified branch into the current branch.</p>

<p>When merging branches, Git will attempt to automatically merge the changes. However, if there are conflicts between the two branches, you may need to resolve those conflicts manually.</p>

<p>You can use following commands to do merge:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git merge <span class="o">[</span>branch-name]  <span class="c"># merge given branch into current branch</span>
git merge <span class="o">[</span>source-branch] <span class="o">[</span>target-branch]
git checkout <span class="nt">--</span><span class="o">[</span>file-name]  <span class="c"># discard the changes done in this file</span>

<span class="c"># when merge conflict arise - stop merging and return to pre-merge state</span>
git merge <span class="nt">--abort</span>  
</code></pre></div></div>

<p>In Git, you can use the <code class="language-plaintext highlighter-rouge">git stash</code> command to temporarily save changes that are not ready to be committed. This can be useful if you need to switch to a different branch or work on a different part of the project, but don’t want to commit your changes yet.</p>

<p>To stash changes, use the <code class="language-plaintext highlighter-rouge">git stash</code> command. To apply the stashed changes later, use the <code class="language-plaintext highlighter-rouge">git stash apply</code> command.</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>git stash</td>
      <td>Stashes changes</td>
    </tr>
    <tr>
      <td>git stash apply</td>
      <td>Applies top most stashed changes but leaves in stash</td>
    </tr>
    <tr>
      <td>git stash pop</td>
      <td>Applies top most stash changes and pop them</td>
    </tr>
  </tbody>
</table>

<p>You can also use the <code class="language-plaintext highlighter-rouge">git stash list</code> command to view a list of all stashed changes.</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>git stash list</td>
      <td>Lists all stashed changes</td>
    </tr>
    <tr>
      <td>git stash clear</td>
      <td>Clear all stashed changes</td>
    </tr>
    <tr>
      <td>git stash branch <branch_name></branch_name></td>
      <td>Restore previously stashed work to a new branch</td>
    </tr>
    <tr>
      <td>git stash show -p</td>
      <td>show the changes done</td>
    </tr>
  </tbody>
</table>

<p>Hey, remember branch and fork are not the same thing. A <strong>branch</strong> is a separate line of development with the same repository while A <strong>fork</strong> is a copy of the whole repository that allows you to make changes to the codebase without affecting the original repository. Forking is often used in open-source development, where developers can fork a repository, make their changes, and then submit a pull request to the original repository owner to incorporate their changes.</p>

<h3 id="updating-projects">Updating Projects</h3>

<p>To share your Git project with others, you can use the <code class="language-plaintext highlighter-rouge">git push</code> command to push your changes to a remote repository, such as on GitHub. This will allow others to access the latest version of your code and collaborate with you on the project.</p>

<p>To update your Git project with changes from a remote repository, you can use the <code class="language-plaintext highlighter-rouge">git pull</code> command. This will pull the latest changes from the remote repository and merge them with your local repository.</p>

<p>You can also use the <code class="language-plaintext highlighter-rouge">git fetch</code> command to fetch changes from a remote repository without merging them into your local repository. This can be useful if you want to review the changes before merging them.</p>

<p><strong>To push changes to a remote repository:</strong></p>

<ol>
  <li>First, add and commit your changes using the <code class="language-plaintext highlighter-rouge">git add</code> and <code class="language-plaintext highlighter-rouge">git commit</code> commands.</li>
  <li>Then, use the <code class="language-plaintext highlighter-rouge">git push</code> command to push your changes to the remote repository.</li>
</ol>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
      <th> </th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>git push origin [branch_name]</td>
      <td>Push the changes to branch [branch_name] of remote repository [origin].</td>
      <td> </td>
    </tr>
    <tr>
      <td>git push [-u</td>
      <td>—set-upstream] origin [branch_name]</td>
      <td>Push changes to remote repository (and remember the branch)</td>
    </tr>
    <tr>
      <td>git push</td>
      <td>Push changes to the upstream branch [If set]</td>
      <td> </td>
    </tr>
    <tr>
      <td>git push origin [-d</td>
      <td>—delete] [branch_name]</td>
      <td>Delete a remote branch</td>
    </tr>
  </tbody>
</table>

<p>Remember in Git, the <strong>upstream branch</strong> refers to the branch on a remote repository that your local branch is tracking. Upstream branch works with both push and pull.</p>

<p>So when pushing changes to a remote repository, the <code class="language-plaintext highlighter-rouge">-u</code> flag or the <code class="language-plaintext highlighter-rouge">--set-upstream</code> flag sets the upstream branch for the current branch. This means that in the future, you can simply use the <code class="language-plaintext highlighter-rouge">git push</code> command without specifying the remote branch name, since Git will assume that you want to push to the upstream branch.</p>

<p>In summary, using the <code class="language-plaintext highlighter-rouge">-u</code> flag simplifies the process of pushing changes to the remote repository in the future, but is not necessary for pushing changes initially.</p>

<p>After pushing changes into remote repository, we can <strong>create a Pull request</strong>. A pull request in GitHub is a way for developers to propose changes to a repository hosted on GitHub. When a developer creates a pull request, they are essentially asking that their changes be reviewed and potentially merged into the main codebase. Other developers can review the changes and provide feedback before the pull request is merged. Pull requests are a key feature of the collaborative nature of GitHub, allowing developers to work together on open source projects and contribute to each other’s code. You can learn more about pull requests from the <a href="https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/about-pull-requests">official GitHub documentation</a>.</p>

<p><img src="/assets/2024/September/branching.webp" alt="Branching" /></p>

<p><strong>To pull changes from a remote repository:</strong></p>

<ol>
  <li>Use the <code class="language-plaintext highlighter-rouge">git pull</code> command to pull the latest changes from the remote repository and merge them with your local repository.</li>
</ol>

<p>Similar to <code class="language-plaintext highlighter-rouge">git push</code>, when you use the <code class="language-plaintext highlighter-rouge">git pull</code> command, Git automatically pulls changes from the upstream branch if you have set upstream branch.</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>git pull</td>
      <td>Pull latest changes</td>
    </tr>
    <tr>
      <td>git pull origin [branch_name]</td>
      <td>Pull changes from given remote branch</td>
    </tr>
  </tbody>
</table>

<p><strong>To fetch changes from a remote repository:</strong></p>

<ol>
  <li>Use the <code class="language-plaintext highlighter-rouge">git fetch</code> command to fetch the latest changes from the remote repository.</li>
</ol>

<p>The <code class="language-plaintext highlighter-rouge">git fetch</code> command allows you to fetch the latest changes from the remote repository without merging them into your local repository. This can be useful if you want to review the changes before merging them.</p>

<p>In summary, the <code class="language-plaintext highlighter-rouge">pull</code> command is a combination of the <code class="language-plaintext highlighter-rouge">fetch</code> and <code class="language-plaintext highlighter-rouge">merge</code> commands, while the <code class="language-plaintext highlighter-rouge">fetch</code> command only downloads changes from the remote repository without merging them.</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>git fetch</td>
      <td>Download objects and refs from remote repository.</td>
    </tr>
  </tbody>
</table>

<h3 id="remote--remote-repository">Remote &amp; Remote Repository</h3>

<p>In Git, a remote is a version of your repository that is hosted on a remote server, such as on GitHub. A remote repository is the repository that is hosted on the remote server. Remote repositories can be used to collaborate with others on a project, and changes made to the remote repository can be pulled into your local repository using Git.</p>

<p>The <code class="language-plaintext highlighter-rouge">git remote</code> command is used to manage remote repositories. It allows you to view the remote repositories that are currently associated with your local repository, as well as add or remove remote repositories.</p>

<p>Here are some commonly used <code class="language-plaintext highlighter-rouge">git remote</code> commands:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">git remote</code>: Lists all the remote repositories that are currently associated with your local repository.</li>
  <li><code class="language-plaintext highlighter-rouge">git remote -v</code>: Lists all the remote repositories along with their corresponding URLs.</li>
  <li><code class="language-plaintext highlighter-rouge">git remote add &lt;name&gt; &lt;url&gt;</code>: Adds a new remote repository with the given name and URL to your local repository. By default, origin is the name of your remote repository [Main one].
Example →
    <ul>
      <li>git remote add origin <a href="https://github.com/user/repo.git">https://github.com/user/repo.git</a></li>
    </ul>

    <p>In this example, <code class="language-plaintext highlighter-rouge">origin</code> is the name of the remote repository, and <code class="language-plaintext highlighter-rouge">https://github.com/user/repo.git</code> is the URL of the remote repository. Once you’ve added the remote repository, you can push your changes to it using the <code class="language-plaintext highlighter-rouge">git push</code> command.</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">git remote remove &lt;name&gt;</code>: Removes the remote repository with the given name from your local repository.</li>
</ul>

<p>Overall, this allows you to work with more than one remote repository from single local repository. You can learn more about <code class="language-plaintext highlighter-rouge">git remote</code> command and its options from the <a href="https://git-scm.com/docs/git-remote">official Git documentation</a>.</p>

<h3 id="inspection-and-comparison">Inspection and Comparison</h3>

<p>Git provides several commands that allow developers to inspect and compare different versions of their code. These commands can be used to view the history of changes, identify differences between versions, and troubleshoot issues that may arise during development.</p>

<p>Here are some commonly used inspection and comparison commands:</p>

<table>
  <thead>
    <tr>
      <th>Commands</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>git log</td>
      <td>Displays the commit history of the repository.</td>
    </tr>
    <tr>
      <td>git log —summary</td>
      <td>Displays detailed history</td>
    </tr>
    <tr>
      <td>git log —oneline</td>
      <td>Displays brief history</td>
    </tr>
    <tr>
      <td>git diff</td>
      <td>Shows the differences between the working directory and the most recent commit.</td>
    </tr>
    <tr>
      <td>git diff [source_branch] [target_branch]</td>
      <td>Shows difference between source and target branch.</td>
    </tr>
    <tr>
      <td>git blame</td>
      <td>Shows which commit and author last modified each line of a file.</td>
    </tr>
    <tr>
      <td>git blame -L 10, 20 [filename.txt]</td>
      <td>Will show information about line 10 to 20 only.</td>
    </tr>
    <tr>
      <td>git show</td>
      <td>Displays the details of a particular commit, including the changes that were made and the commit message.</td>
    </tr>
    <tr>
      <td>git show Head</td>
      <td>Displays details of latest commit</td>
    </tr>
    <tr>
      <td>git show [commit hash]</td>
      <td>Displays details about given commit.</td>
    </tr>
    <tr>
      <td>git show [commit hash]:[file_path]</td>
      <td>Displays details about the given file for this commit.</td>
    </tr>
    <tr>
      <td>git show <commit> --stat</commit></td>
      <td>Displays histogram</td>
    </tr>
    <tr>
      <td>git show-ref –head</td>
      <td>Find head of current branch</td>
    </tr>
  </tbody>
</table>

<p>These commands can be used in combination with one another to gain a better understanding of the history of the code and identify any issues that may need to be addressed.</p>

<p>You can learn more about Git commands from <a href="https://git-scm.com/docs">GitHub Docs</a>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>In conclusion, Git is an essential tool for developers who want to keep track of changes in their code and collaborate with others. It allows developers to easily view the history of their code, revert to previous versions, and work on separate branches. By mastering the basics of Git, developers can become more efficient and effective in their work.</p>

<p>That’s all for this Blog. Hope this was worth your time. ❤️❤️</p>]]></content><author><name></name></author><category term="Web" /><summary type="html"><![CDATA[Introduction]]></summary></entry><entry><title type="html">Decoding OOPs with cpp</title><link href="http://localhost:4000/programming/2023/04/09/Decodings-OOPS-with-CPP.html" rel="alternate" type="text/html" title="Decoding OOPs with cpp" /><published>2023-04-09T15:08:10+05:30</published><updated>2023-04-09T15:08:10+05:30</updated><id>http://localhost:4000/programming/2023/04/09/Decodings-OOPS-with-CPP</id><content type="html" xml:base="http://localhost:4000/programming/2023/04/09/Decodings-OOPS-with-CPP.html"><![CDATA[<p>Programming is a vast field with myriad techniques and paradigms. Among these, Object-Oriented Programming (OOP) shines as a method that helps us structure our programs using objects. Objects are entities that bundle data and functionality, making our code more intuitive and easier to maintain. C++ is a perfect language to delve into OOP, as it inherently supports this paradigm.</p>

<p>Let’s start our journey with OOP’s (aka Object Oriented Programming). C++ is a OOP’s oriented programming language.</p>

<h2 id="1-class-logical-entity">1. Class (Logical Entity)</h2>

<p>A class serves as a blueprint for creating objects. In technical terms, it’s a user-defined data type with its own data members (attributes) and member functions (methods).</p>

<p>To access a class we then need instance of that class known as object.</p>

<p>Example → Consider a class ‘Car’, which could have attributes like speed limit and mileage, and methods like applying brakes, increasing speed, and so on.</p>

<p>Class car</p>

<p>Data members → Speed limit, mileage, etc.</p>

<p>Member functions → Apply brakes, increase speed, etc.</p>

<h2 id="2-object-physical-entity">2. Object (Physical Entity)</h2>

<p>An object is an instance of a class. It’s a real-world entity that gives us the ability to access and manipulate the data within a class.</p>

<ul>
  <li>Class definition (no memory allocated).</li>
  <li>When we create object (memory allocated).</li>
</ul>

<p>Example →</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span> 
<span class="p">{</span>
	<span class="kt">char</span> <span class="n">name</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
	<span class="kt">int</span> <span class="n">id</span><span class="p">;</span>
	<span class="nl">public:</span>
		<span class="kt">void</span> <span class="n">getdetails</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Person</span> <span class="n">pi</span><span class="p">;</span>     <span class="c1">// object</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="3-encapsulation-protective-shield">3. Encapsulation (protective shield)</h2>

<p>Encapsulation is the practice of binding data and the functions that handle them within a class. It acts as a protective shield, preventing data from being accessed directly by the code outside the class.</p>

<p>In encapsulation we hide the data and implementation details within a class.</p>

<ul>
  <li>Used in Abstraction</li>
  <li>Binding together the data and function that manipulate them.</li>
</ul>

<p>Example → a Class.</p>

<h2 id="4-abstraction-hiding-the-complexity">4. Abstraction (Hiding the complexity)</h2>

<p>Abstraction means displaying only essential information and hiding the details.</p>

<p>There are 2 ways to do Abstraction: -</p>

<h4 id="using-class-">Using Class →</h4>

<p>We use <strong>access specifiers</strong>.  Access specifiers enforce restrictions on class members.</p>

<ol>
  <li>Public → We can access from anywhere.</li>
  <li>Private (Default) → We can access only from within class.</li>
  <li>Protected → We can also access from subclass.</li>
</ol>

<p>Example →</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Class</span> <span class="n">Abstraction</span>
<span class="p">{</span>
    <span class="nl">private:</span>
        <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">;</span>
    <span class="nl">public:</span>
        <span class="kt">void</span> <span class="n">set</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">a</span> <span class="o">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">y</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kt">void</span> <span class="nf">dispaly</span><span class="p">()</span> <span class="p">{</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span> <span class="o">&lt;&lt;</span> <span class="n">b</span> <span class="o">&lt;&lt;</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Abstraction</span> <span class="n">obj</span><span class="p">;</span>
    <span class="n">obj</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
    <span class="n">obj</span><span class="p">.</span><span class="n">display</span><span class="p">();</span>
<span class="p">}</span>

<span class="c1">// OUTPUT</span>
<span class="c1">// 1 2</span>
</code></pre></div></div>

<h4 id="in-header-files-">In header Files →</h4>
<p>Example → You can import math.h and use Pow() function without directly knowing algorithm behind it.</p>

<p>The degree of abstraction refers to the level of detail or complexity at which information is presented or understood.</p>

<p>Completely hidden → highest degree of abstraction.</p>

<h3 id="5-polymorphism-many-forms-of-an-object">5. Polymorphism (Many forms of an object)</h3>

<p>Polymorphism refers to an object’s ability to take on many forms.</p>

<ul>
  <li>Property of having many forms</li>
  <li>Ability of a message to be displayed in more than one form.</li>
</ul>

<p>Example → Like man can be husband, father and son.</p>

<p>Polymorphism in C++</p>

<h4 id="1-operator-overloading">1. Operator Overloading</h4>

<p>Customizes the C++ operators for operands of user-defined types.</p>

<p>Example → “+” operator can be overloaded to do string concatenation and addition.
”a” + “b” = “ab”
4 + 3 = 7</p>

<table>
  <thead>
    <tr>
      <th>Overloadable</th>
      <th>Non-Overloadable</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>+          -           *          /        %          ^          =</td>
      <td>::            .*          .           ?:</td>
    </tr>
  </tbody>
</table>

<p>Also, we can define the behavior of operators for objects, be defining them in class.</p>

<p>Example →</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">complex</span> <span class="p">{</span>
    <span class="nl">public:</span>
        <span class="kt">int</span> <span class="n">real</span><span class="p">,</span> <span class="n">img</span><span class="p">;</span>
        <span class="n">complex</span><span class="p">(</span><span class="kt">int</span> <span class="n">r</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span><span class="n">real</span><span class="o">=</span><span class="n">r</span><span class="p">,</span> <span class="n">img</span><span class="o">=</span><span class="n">i</span><span class="p">;}</span>
        
        <span class="c1">// Here, we defined behavior of "+" when we add to complex numbers.</span>
        <span class="n">complex</span> <span class="k">operator</span> <span class="o">+</span> <span class="p">(</span><span class="n">complex</span> <span class="k">const</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">complex</span> <span class="n">res</span><span class="p">;</span>
            <span class="n">res</span><span class="p">.</span><span class="n">real</span> <span class="o">=</span> <span class="n">real</span> <span class="o">+</span> <span class="n">obj</span><span class="p">.</span><span class="n">real</span><span class="p">;</span>
            <span class="n">res</span><span class="p">.</span><span class="n">img</span> <span class="o">=</span> <span class="n">img</span> <span class="o">+</span> <span class="n">obj</span><span class="p">.</span><span class="n">img</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
        <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// an easy example -&gt; used in sorting</span>
<span class="k">struct</span> <span class="nc">P</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="k">operator</span><span class="o">&lt;</span><span class="p">(</span><span class="k">const</span> <span class="n">P</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="k">return</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">p</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
        <span class="k">else</span> <span class="k">return</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">p</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<h4 id="2-templates">2. Templates</h4>
<h4 id="3-function-overloading">3. Function Overloading</h4>
<p>Use a single function name to perform different tasks.</p>

<p>Example →</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">sum</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">;</span>	
<span class="p">}</span>
<span class="kt">int</span> <span class="nf">sum</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">sum1</span> <span class="o">=</span> <span class="n">sum</span><span class="p">(</span><span class="mi">2</span><span class="o">+</span><span class="mi">3</span><span class="p">);</span>
    <span class="n">sum2</span> <span class="o">=</span> <span class="n">sum</span><span class="p">(</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">4</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Early binding is when a variable is assigned its value at compile time. Late binding is when a variable is assigned a value at run time.</p>

<h3 id="dynamic-binding--abstract-class--virtual-method">Dynamic Binding / Abstract class / virtual method</h3>

<p>Dynamic binding, also known as late binding or runtime polymorphism, is a mechanism in object-oriented programming where the actual method or function to be executed is determined at runtime based on the type of the object.</p>

<p>In C++, dynamic binding is achieved through the use of virtual functions. A virtual function is a member function declared within a base class and marked with the <code class="language-plaintext highlighter-rouge">virtual</code> keyword. When a derived class overrides this virtual function, the function call is resolved dynamically at runtime based on the actual type of the object being referenced.</p>

<p>Example:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Shape</span> <span class="p">{</span>    <span class="c1">// THIS IS NOT AN ABSTRACT CLASS</span>
<span class="nl">public:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">draw</span><span class="p">()</span> <span class="p">{</span>    <span class="c1">// because provides implementation of virtual method</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Drawing a shape."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
    
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Circle</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Shape</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">draw</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Drawing a circle."</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Rectangle</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Shape</span> <span class="p">{</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">Shape</span><span class="o">*</span> <span class="n">shape1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Circle</span><span class="p">();</span>
    <span class="n">Shape</span><span class="o">*</span> <span class="n">shape2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Rectangle</span><span class="p">();</span>

    <span class="n">shape1</span><span class="o">-&gt;</span><span class="n">draw</span><span class="p">();</span> <span class="c1">// Dynamic binding - calls draw() of Circle</span>
    <span class="n">shape2</span><span class="o">-&gt;</span><span class="n">draw</span><span class="p">();</span> <span class="c1">// Dynamic binding - calls draw() of Shape</span>
        <span class="c1">// FUN NOTE -&gt; A-&gt;B IS EQUAL TO (*A).B</span>

    <span class="k">delete</span> <span class="n">shape1</span><span class="p">;</span>
    <span class="k">delete</span> <span class="n">shape2</span><span class="p">;</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In the above example, the <code class="language-plaintext highlighter-rouge">draw()</code> function is declared as a virtual function in the base class <code class="language-plaintext highlighter-rouge">Shape</code>. When we create objects of derived classes (<code class="language-plaintext highlighter-rouge">Circle</code> and <code class="language-plaintext highlighter-rouge">Rectangle</code>) and assign them to a pointer of type , the appropriate  function is called based on the actual type of the object being referenced. This is determined dynamically at runtime, allowing for polymorphic behavior.</p>

<p>Yes, if the <code class="language-plaintext highlighter-rouge">Rectangle</code> class does not override the <code class="language-plaintext highlighter-rouge">draw</code> method of the <code class="language-plaintext highlighter-rouge">Shape</code> class, then calling <code class="language-plaintext highlighter-rouge">draw</code> on an object of the <code class="language-plaintext highlighter-rouge">Rectangle</code> class will call the <code class="language-plaintext highlighter-rouge">draw</code> method defined in the <code class="language-plaintext highlighter-rouge">Shape</code> class.</p>

<h3 id="abstract-class">Abstract Class</h3>

<p>An abstract class is a class that cannot be instantiated, meaning we cannot create objects of that class. It serves as a blueprint for other classes to inherit from. It contains at least one pure virtual function, which is a virtual function that has no implementation in the abstract class and must be overridden by any derived class inheriting from it.</p>

<p>To define an abstract class in C++, we use the <code class="language-plaintext highlighter-rouge">virtual</code> keyword to declare pure virtual functions. The syntax is as follows:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">AbstractClass</span> <span class="p">{</span>   <span class="c1">// THIS IS AN ABSTRACT CLASS</span>
<span class="nl">public:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">pureVirtualFunction</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// Pure virtual function</span>
    <span class="kt">void</span> <span class="n">nonVirtualFunction</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Non-virtual function</span>
    <span class="p">}</span>
<span class="p">};</span>

</code></pre></div></div>

<p>In the example above, <code class="language-plaintext highlighter-rouge">pureVirtualFunction()</code> is a pure virtual function, and <code class="language-plaintext highlighter-rouge">nonVirtualFunction()</code> is a normal member function. Any class that inherits from <code class="language-plaintext highlighter-rouge">AbstractClass</code> must override the pure virtual function, but it can choose whether to override the non-virtual function.</p>

<h2 id="6-inheritance">6. Inheritance</h2>

<p>Capability of a child class (Sub-Class) to derive properties and characteristics from parent class (Super Class).</p>

<p>Gives us “Reusability” of methods.</p>

<p>We can access <strong>public, protected</strong> member of super class from subclass.</p>

<p>Example →</p>

<p>Let’s say there is an Animal class. then we can create subclasses like Dog, Cat and Cow subclasses which inherits the properties of Animal super class.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Animal</span> 
<span class="p">{</span>
		<span class="nl">public:</span>
			<span class="n">string</span> <span class="n">species</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">Dog</span><span class="o">:</span><span class="k">public</span> <span class="n">Animal</span> <span class="p">{</span>
		<span class="nl">public:</span> 
			<span class="kt">int</span> <span class="n">weight</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// Multiple inheritance</span>
<span class="k">class</span> <span class="nc">C</span> <span class="o">:</span> <span class="k">public</span> <span class="n">A</span><span class="p">,</span> <span class="k">public</span> <span class="n">B</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="kt">void</span> <span class="n">displayC</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"This is class C"</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="n">Dog</span> <span class="n">d</span><span class="p">;</span>
	<span class="n">d</span><span class="p">.</span><span class="n">species</span> <span class="o">=</span> <span class="s">"xyz"</span><span class="p">;</span>
	<span class="n">d</span><span class="p">.</span><span class="n">weight</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Note → The access specifier used while inheriting the parent class, tells the nature of the inherited properties.  By default, it is private.</p>

<p>In object-oriented programming, an IS-A relationship refers to inheritance or subclassing.</p>

<p>For example, if we have a base class called “Animal” and a derived class called “Dog”, we can say that “Dog IS-A Animal”. This means that a dog is a type of animal and inherits the characteristics of an animal.</p>

<h3 id="types-of-inheritance">Types of Inheritance</h3>

<p>In C++, inheritance allows a derived class to inherit properties and characteristics from a base class. There are several types of inheritance:</p>

<ol>
  <li>Single Inheritance: A derived class inherits properties from a single base class.</li>
  <li>Multiple Inheritance: A derived class inherits properties from multiple base classes.
A → B
C → B</li>
  <li>Multilevel Inheritance: A derived class inherits properties from a base class, which in turn inherits properties from another base class.
A → B → C</li>
  <li>Hierarchical Inheritance: Multiple derived classes inherit properties from a single base class.
A → B
A → C</li>
  <li>Hybrid Inheritance: It is a combination of multiple and multilevel inheritance.</li>
</ol>

<p>These types of inheritance provide flexibility in designing class hierarchies, allowing for code reuse and organization of related classes.</p>

<p>In conclusion, Object-Oriented Programming provides a clear structure for our programs, making the code easier to design, understand, and maintain. So, the next time you’re coding in C++, keep these OOP concepts in mind as your guiding principles. They will surely make your programming journey smoother and more efficient.</p>]]></content><author><name></name></author><category term="Programming" /><summary type="html"><![CDATA[Programming is a vast field with myriad techniques and paradigms. Among these, Object-Oriented Programming (OOP) shines as a method that helps us structure our programs using objects. Objects are entities that bundle data and functionality, making our code more intuitive and easier to maintain. C++ is a perfect language to delve into OOP, as it inherently supports this paradigm.]]></summary></entry><entry><title type="html">Hashing and Hash Functions</title><link href="http://localhost:4000/data/structures/2022/03/22/Hashing-and-Hash-Functions.html" rel="alternate" type="text/html" title="Hashing and Hash Functions" /><published>2022-03-22T15:08:10+05:30</published><updated>2022-03-22T15:08:10+05:30</updated><id>http://localhost:4000/data/structures/2022/03/22/Hashing-and-Hash-Functions</id><content type="html" xml:base="http://localhost:4000/data/structures/2022/03/22/Hashing-and-Hash-Functions.html"><![CDATA[<h1 id="introduction">Introduction</h1>

<p>Let’s talk hashing and hash tables. Array + Linked List advantages.</p>

<p><code class="language-plaintext highlighter-rouge">Hash Table</code> is a data structure which organizes data using <code class="language-plaintext highlighter-rouge">hash functions</code> in order to support quick insertion and search.</p>

<h1 id="hashing">Hashing</h1>

<p>In hashing, we convert a value/num/string into key index using hash function. The idea is to uniformly distribute the key to the array.</p>

<p><code class="language-plaintext highlighter-rouge">Hash_func(value/int/string) = key/index</code></p>

<p><code class="language-plaintext highlighter-rouge">arr[key/index] = value/int/string</code></p>

<p>When we insert a key-value pair in a hash table, we store the key along with its value.</p>

<p>Properties of good hash function: -</p>

<ol>
  <li>Makes use of all info provided by key</li>
  <li>Uniformly distributes output across table</li>
  <li>Maps similar keys to very different hash values</li>
  <li>Uses only very fast operations.</li>
</ol>

<h1 id="avoiding-collision">Avoiding Collision</h1>

<p>It’s very hard to create a perfect hashing function. Rarely or when we use a bad hashing function, it gives same key for 2 different values. Such case is known as Collision.</p>

<p>To avoid collision we apply different techniques, as explained below:</p>

<h2 id="1-separate-chaining">1. Separate chaining</h2>

<p>In this we use a map of type vector, hence we simply push the next value at the key.</p>

<p>Example →</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">index</span> <span class="o">=</span> <span class="n">hash_func</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="n">map</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</code></pre></div></div>

<p>Complexity:</p>

<p>Insertion takes O(1) and search takes O(k), k = size of linked list.</p>

<p><strong>Open addressing</strong> based algorithms. In these algorithms we find the next empty space.</p>

<h2 id="2-linear-probing">2. Linear Probing</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="n">not</span> <span class="n">empty</span><span class="o">:</span>
	<span class="n">index</span> <span class="o">=</span> <span class="p">(</span><span class="n">index</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span><span class="o">%</span><span class="n">size</span>
	<span class="n">i</span><span class="o">++</span>
</code></pre></div></div>

<p><a href="https://leetcode.com/explore/learn/card/hash-table/182/practical-applications/1139/">Implementation of Hash Set with Linear probing</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyHashSet</span> <span class="p">{</span>
<span class="n">public</span><span class="p">:</span>
<span class="n">static</span> <span class="n">const</span> <span class="nb">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">1000005</span><span class="p">;</span>
<span class="nb">int</span> <span class="n">arr</span><span class="p">[</span><span class="n">size</span><span class="p">];</span>

<span class="nc">MyHashSet</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">memset</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nf">sizeof</span><span class="p">(</span><span class="n">arr</span><span class="p">));</span>
<span class="p">}</span>

<span class="n">void</span> <span class="nf">add</span><span class="p">(</span><span class="nb">int</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="o">//</span> <span class="nb">hash</span> <span class="n">function</span>
    <span class="nb">int</span> <span class="n">indx</span> <span class="o">=</span> <span class="n">key</span> <span class="o">%</span> <span class="n">size</span><span class="p">;</span>
    
    <span class="o">//</span> <span class="n">linear</span> <span class="n">probing</span>
    <span class="nb">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
    <span class="nf">while</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">indx</span><span class="p">]</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">indx</span> <span class="o">=</span> <span class="p">(</span><span class="n">indx</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span><span class="p">;</span>
        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="o">//</span> <span class="n">store</span>
    <span class="n">arr</span><span class="p">[</span><span class="n">indx</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">void</span> <span class="nf">remove</span><span class="p">(</span><span class="nb">int</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">int</span> <span class="n">indx</span> <span class="o">=</span> <span class="n">key</span> <span class="o">%</span> <span class="n">size</span><span class="p">;</span>
    
    <span class="nb">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
    <span class="nf">while</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">indx</span><span class="p">]</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        
        <span class="o">//</span> <span class="n">remove</span> <span class="n">only</span> <span class="k">if</span> <span class="n">contains</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">indx</span><span class="p">]</span> <span class="o">==</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">arr</span><span class="p">[</span><span class="n">indx</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="n">indx</span> <span class="o">=</span> <span class="p">(</span><span class="n">indx</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span><span class="o">%</span><span class="n">size</span><span class="p">;</span>
        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nb">bool</span> <span class="nf">contains</span><span class="p">(</span><span class="nb">int</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">int</span> <span class="n">indx</span> <span class="o">=</span> <span class="n">key</span> <span class="o">%</span> <span class="n">size</span><span class="p">;</span>
    
    <span class="o">//</span> <span class="n">move</span> <span class="n">till</span> <span class="n">empty</span> <span class="n">space</span>
    <span class="nb">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">1</span><span class="p">;</span>
    <span class="nf">while</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">indx</span><span class="p">]</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        
        <span class="o">//</span> <span class="n">contains</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">indx</span><span class="p">]</span> <span class="o">==</span> <span class="n">key</span><span class="p">)</span> 
            <span class="k">return</span> <span class="n">true</span><span class="p">;</span>
        
        <span class="n">indx</span> <span class="o">=</span> <span class="p">(</span><span class="n">indx</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span><span class="o">%</span> <span class="n">size</span><span class="p">;</span>
        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">false</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<ul>
  <li><a href="https://leetcode.com/explore/learn/card/hash-table/182/practical-applications/1140/">Hash Map Implementation with 2 arrays and Linear probing</a></li>
</ul>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">MyHashMap</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">1000005</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">key</span><span class="p">[</span><span class="n">size</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">value</span><span class="p">[</span><span class="n">size</span><span class="p">];</span>
    
    <span class="n">MyHashMap</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">memset</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">key</span><span class="p">));</span>
        <span class="n">memset</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">value</span><span class="p">));</span>
    <span class="p">}</span>
    
    <span class="kt">void</span> <span class="nf">put</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="p">,</span> <span class="kt">int</span> <span class="n">v</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">indx</span> <span class="o">=</span> <span class="n">k</span> <span class="o">%</span> <span class="n">size</span><span class="p">;</span>
        
        <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">key</span><span class="p">[</span><span class="n">indx</span><span class="p">]</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// already present</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">key</span><span class="p">[</span><span class="n">indx</span><span class="p">]</span> <span class="o">==</span> <span class="n">k</span><span class="p">)</span>
                <span class="k">break</span><span class="p">;</span>
            
            <span class="n">indx</span> <span class="o">=</span> <span class="p">(</span><span class="n">indx</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span><span class="p">;</span>
            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="n">key</span><span class="p">[</span><span class="n">indx</span><span class="p">]</span> <span class="o">=</span> <span class="n">k</span><span class="p">;</span>
        <span class="n">value</span><span class="p">[</span><span class="n">indx</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kt">int</span> <span class="nf">get</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">indx</span> <span class="o">=</span> <span class="n">k</span> <span class="o">%</span> <span class="n">size</span><span class="p">;</span>
        
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">key</span><span class="p">[</span><span class="n">indx</span><span class="p">]</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            
            <span class="c1">// contains</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">key</span><span class="p">[</span><span class="n">indx</span><span class="p">]</span> <span class="o">==</span> <span class="n">k</span><span class="p">)</span> 
                <span class="k">return</span> <span class="n">value</span><span class="p">[</span><span class="n">indx</span><span class="p">];</span>
            
            <span class="n">indx</span> <span class="o">=</span> <span class="p">(</span><span class="n">indx</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span><span class="o">%</span> <span class="n">size</span><span class="p">;</span>
            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kt">void</span> <span class="nf">remove</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">indx</span> <span class="o">=</span> <span class="n">k</span> <span class="o">%</span> <span class="n">size</span><span class="p">;</span>
        
        <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">key</span><span class="p">[</span><span class="n">indx</span><span class="p">]</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
            
            <span class="c1">// remove only if contains</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">key</span><span class="p">[</span><span class="n">indx</span><span class="p">]</span> <span class="o">==</span> <span class="n">k</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">key</span><span class="p">[</span><span class="n">indx</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
                <span class="n">value</span><span class="p">[</span><span class="n">indx</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            
            <span class="n">indx</span> <span class="o">=</span> <span class="p">(</span><span class="n">indx</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span><span class="o">%</span><span class="n">size</span><span class="p">;</span>
            <span class="n">i</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="complexity">Complexity:</h3>

<p>Search and insert both takes O(n), n = size of table</p>

<h2 id="3-quadratic-probing">3. Quadratic Probing</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="n">not</span> <span class="n">empty</span><span class="o">:</span>
	<span class="n">index</span> <span class="o">=</span> <span class="p">(</span><span class="n">index</span> <span class="o">+</span> <span class="n">i</span><span class="o">^</span><span class="mi">2</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span>
	<span class="n">i</span><span class="o">++</span>
</code></pre></div></div>

<h2 id="4-double-hashing">4. Double hashing</h2>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">index</span> <span class="o">=</span> <span class="n">hashfunc</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="n">index2</span> <span class="o">=</span> <span class="n">hashfunc2</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

<span class="k">while</span> <span class="n">not</span> <span class="n">empty</span><span class="o">:</span>
	<span class="n">index</span> <span class="o">=</span> <span class="p">(</span><span class="n">index</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">index2</span><span class="p">)</span> <span class="o">%</span> <span class="n">size</span>
	<span class="n">i</span><span class="o">++</span>
</code></pre></div></div>

<p>Practically we use separate chaining with height-balanced BST.</p>

<h3 id="complexity-">Complexity:-</h3>

<p>The average time complexity of both insertion and search is still <code class="language-plaintext highlighter-rouge">O(1)</code>. And the time complexity in the worst case is <code class="language-plaintext highlighter-rouge">O(logN)</code> for both insertion and search by using height-balanced BST (at each index, using vector). It is a trade-off between insertion and search.</p>]]></content><author><name></name></author><category term="Data" /><category term="structures" /><summary type="html"><![CDATA[Introduction]]></summary></entry></feed>